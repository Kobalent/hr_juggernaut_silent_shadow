
declare global.number[0] with network priority local
declare global.number[1] with network priority local
declare global.number[2] with network priority local
declare global.object[0] with network priority low
declare global.object[1] with network priority local
declare global.object[2] with network priority local
declare global.player[0] with network priority low
declare global.player[1] with network priority local
declare global.player[2] with network priority local
declare global.player[3] with network priority local
declare global.timer[0] = script_option[2]
declare global.timer[1] = 5
declare player.number[0] with network priority low
declare player.timer[0] = 1
declare object.number[0] with network priority local


/*TODO: Set players to Meeting traits at the start of every even round*/
for each player do
   current_player.apply_traits()
   
/*Use Face player.biped.face_toward([meeting table or towards the found body])*/
/*use current_player.biped.place_at_me([biped?)]*/

/*TODO: use object.set_scale(10) to make player tiny and fit into vents*/

/*idea: create waypoint on dead body's ability when discovered (try to pick up)*/
/*set players to Meeting trait for 90 seconds, maybe tp to body?*/
/*Declare another player.number variable to kep count of meetings called*/

/*Make Shadow invincible unless shot by X players during meeting*/

/*check if hud_target_object does what i expect (TRUE if object is in reticle)*/

/*insert_theatre_film_marker on meeting called/adjourned*/

/*Set waypoint for dead bodies as skull, show distance from player*/

/* make meetings monitor only? */

/*use mod_player set for ghosts? will be used for something!*/

/*Use Hud widgets (specially set_text) for in-game info*/

/* "dying" by shadow can spawn a monitor biped that the player possesses and becomes invisible. Maybe change teams? */

/* generate waypoint upon player "death", set_visibility = false until discovered */

do
   global.timer[0].set_rate(-100%)
   global.timer[1].set_rate(-100%)
end

for each player do
   if current_player.number[0] == 0 then 
      if game.score_to_win != 0 then 
         current_player.set_round_card_title("Kill the Juggernaut.\r\n%n points to win.", game.score_to_win)
      end
      if game.score_to_win == 0 then 
         current_player.set_round_card_title("Complete tasks and stay at full health to score. Sop Th Shadow or reach (points) points to win.")
      end
      send_incident(juggernaut_game_start, current_player, no_player)
      current_player.number[0] = 1
   end
end

for each player do
   current_player.timer[0].set_rate(0%)
   if global.player[0] == current_player then 
      global.object[1] = global.player[0].biped
      if not global.object[1] == no_object then 
         current_player.timer[0].set_rate(-100%)
         if current_player.timer[0].is_zero() then 
            current_player.script_stat[0] += 1
            current_player.timer[0].reset()
         end
      end
   end
end

if global.timer[1].is_zero() and not global.player[0] == no_player and not global.player[0].is_not_respawning() then 
   global.player[0] = no_player
   global.timer[1].reset()
   global.timer[1].set_rate(-100%)
end

on host migration: do
   global.timer[1].reset()
   global.timer[1].set_rate(-100%)
end

for each player do
   global.player[1] = global.player[0]
   global.player[2] = no_player
   global.player[3] = current_player
   global.number[2] = 0
   if current_player.killer_type_is(guardians | suicide | kill | betrayal | quit) then 
      global.player[2] = current_player.try_get_killer()
      if global.player[3] == global.player[1] and global.player[2] == global.player[3] or global.player[2] == no_player then 
         global.number[2] = 1
      end
      if not global.number[2] == 1 and global.player[2] == global.player[1] then 
         global.player[2].score += script_option[1]
         send_incident(kill_as_juggernaut, global.player[2], global.player[3])
      end
      if current_player == global.player[1] and not global.number[2] == 1 then 
         global.player[2].score += script_option[0]
         send_incident(juggernaut_kill, global.player[2], global.player[1])
         global.player[1].set_round_card_title("Kill the Juggernaut.\r\n%n points to win.", game.score_to_win)
         global.player[0] = global.player[2]
         send_incident(new_juggernaut, global.player[0], all_players)
         global.timer[0].reset()
         global.timer[0].set_rate(-100%)
         global.player[0].biped.remove_weapon(primary, false)
         global.player[0].biped.remove_weapon(secondary, false)
         global.player[0].biped.add_weapon(gravity_hammer, force)
         global.player[0].biped.shields = 200
         global.player[0].frag_grenades = 0
         global.player[0].plasma_grenades = 0
         global.object[0].delete()
         global.object[0] = global.player[0].biped.place_at_me(particle_emitter_fire, none, never_garbage_collect, 0, 0, 0, none)
         global.object[0].attach_to(global.player[0].biped, 0, 0, 5, absolute)
      end
   end
end

for each player randomly do
   if global.timer[1].is_zero() then 
      global.player[1] = global.player[0]
      global.object[1] = global.player[0].biped
      if global.player[0] == no_player and not current_player == global.player[1] then 
         global.object[2] = current_player.biped
         if not global.object[2] == no_object and not current_player.biped.is_out_of_bounds() then 
            global.player[0] = current_player
            send_incident(new_juggernaut, global.player[0], all_players)
            global.player[0].biped.remove_weapon(primary, false)
            global.player[0].biped.remove_weapon(secondary, false)
            global.player[0].biped.add_weapon(gravity_hammer, force)
            global.player[0].biped.shields = 200
            global.player[0].frag_grenades = 0
            global.player[0].plasma_grenades = 0
            global.timer[0].reset()
            global.timer[0].set_rate(-100%)
            global.object[0].delete()
            global.object[0] = global.player[0].biped.place_at_me(particle_emitter_fire, none, never_garbage_collect, 0, 0, 0, none)
            global.object[0].attach_to(global.player[0].biped, 0, 0, 5, absolute)
         end
      end
   end
end

do
   for each player do
      current_player.biped.set_waypoint_icon(none)
      current_player.biped.set_waypoint_priority(low)
   end
   global.player[0].apply_traits(script_traits[0])
   global.player[0].biped.set_waypoint_icon(bullseye)
   global.player[0].biped.set_waypoint_priority(high)
   global.player[0].set_round_card_title("You are The Shadow")
   if not global.timer[0].is_zero() then 
      global.player[0].apply_traits(script_traits[1])
      global.player[0].biped.set_waypoint_icon(skull)
   end
end

for each object with label 2 do
   current_object.number[0] = 1
   global.player[1] = no_player
   global.player[1] = current_object.try_get_carrier()
   if global.player[1] == global.player[0] then 
      current_object.number[0] = 0
   end
end

if not global.player[0] == no_player then 
   global.object[1] = no_object
   global.object[1] = global.player[0].try_get_weapon(secondary)
   if not global.object[1] == no_object and not global.object[1].is_of_type(gravity_hammer) then 
      global.player[0].biped.remove_weapon(secondary, false)
   end
end

if not global.player[0] == no_player then 
   global.object[1] = no_object
   global.object[1] = global.player[0].try_get_weapon(primary)
   if not global.object[1].is_of_type(gravity_hammer) then 
      global.player[0].biped.add_weapon(gravity_hammer, force)
   end
end

for each object with label 2 do
   if current_object.number[0] == 1 then 
      current_object.delete()
   end
end

if game.round_time_limit > 0 and game.round_timer.is_zero() then 
   game.end_round()
end

for each player do
   current_player.team = team[0]
   if current_player == global.player[0] then 
      current_player.team = team[1]
   end
end

for each player do
   if not global.player[0] == no_player then 
      global.object[1] = global.player[0].biped
      if global.object[1] == no_object then 
         global.player[0] = no_player
      end
   end
end

for each object with label 5 do
   current_object.delete()
end

for each player do
   global.object[1] = current_player.biped
   if global.object[1] == no_object then 
      current_player.team = no_team
   end
end
